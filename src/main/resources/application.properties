quarkus.datasource.db-kind=postgresql
quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/tododb
quarkus.datasource.username=todouser
quarkus.datasource.password=todopw

# Run Flyway migrations automatically
quarkus.flyway.migrate-at-start=true

#quarkus.hibernate-orm.schema-management.strategy=drop-and-create
quarkus.hibernate-orm.multitenant=DISCRIMINATOR

quarkus.log.level=INFO
quarkus.log.min-level=INFO
quarkus.log.console.enable=true
quarkus.log.console.format=%d{HH:mm:ss} %-5p [%c] %s%e%n

quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus
quarkus.oidc.client-id=quarkus-app
quarkus.oidc.credentials.secret=u3s9ikZqFbi8jdV8B4O7wJOv2ymOMUmb
quarkus.oidc.application-type=web-app
quarkus.oidc.roles.role-claim-path=resource_access/quarkus-app/roles
quarkus.http.auth.permission.authenticated.paths=/*
quarkus.http.auth.permission.authenticated.policy=authenticated

quarkus.http.auth.permission.permit.paths=q/*
quarkus.http.auth.permission.permit.policy=permit

quarkus.http.auth.policy.role-policy1.roles-allowed=quarkus_login
quarkus.http.auth.permission.roles1.paths=todo/*
quarkus.http.auth.permission.roles1.policy=role-policy1

# BLOCK START - comment block for debugging tokens with http://localhost:8080/tokens after authentication, when authorization fails
quarkus.http.auth.policy.role-policy2.roles-allowed=quarkus_admin
quarkus.http.auth.permission.roles2.paths=tokens/*
quarkus.http.auth.permission.roles2.policy=role-policy2
# BLOCK END